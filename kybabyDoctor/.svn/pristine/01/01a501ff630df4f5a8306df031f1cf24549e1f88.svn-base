package com.kybaby.newbussiness.doctorsign.action;

import java.io.File;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.struts2.ServletActionContext;

import com.kybaby.domain.DoctorGoodField;
import com.kybaby.domain.DoctorInfo;
import com.kybaby.domain.Position;
import com.kybaby.newbussiness.doctorclinic.domain.DoctorServiceType;
import com.kybaby.newbussiness.doctorclinic.domain.HospitalBasicInfo;
import com.kybaby.newbussiness.doctorring.action.NewBaseAction;
import com.kybaby.newbussiness.doctorring.util.DateManage;
import com.kybaby.newbussiness.doctorsign.domain.DoctorCardInfo;
import com.kybaby.newbussiness.doctorsign.domain.DoctorLifeInfo;
import com.kybaby.newbussiness.doctorsign.domain.DoctorMajor;
import com.kybaby.newbussiness.doctorsign.vo.SignDoctor;
import com.kybaby.newbussiness.medicalorgandbusiness.domain.OrganOperator;
import com.kybaby.util.EncryptUtil;
import com.kybaby.util.LogUtil;
import com.opensymphony.xwork2.ActionContext;

@SuppressWarnings("serial")
public class DoctorDataGatherAction extends NewBaseAction{
	
	private String uploadDir = "../kybabyBG/admin/images/doctorCertifiedPicture";// 保存上传文件的目录
	private DoctorInfo doctorInfo;
	private DoctorCardInfo doctorCardInfo;
	private DoctorLifeInfo doctorLifeInfo;
	private HospitalBasicInfo hospitalBasicInfo;
	private List<Position>  positionList;
	private DoctorMajor major;
	private List<DoctorMajor> firstMajors;
	private List<DoctorMajor> secondMajors;
	private List<DoctorMajor> thirdMajors;
	private String mes;
	private List<DoctorCardInfo> doctorCardInfos;
	private String professionFlag;
	private List<SignDoctor> SignDoctors;
	private List<DoctorGoodField> doctorGoodFields;
	private OrganOperator organOperator;
	/**
	 * 服务内容集合
	 */
	private List<DoctorServiceType> doctorServiceTypes;
	/**
	 * 医院信息集合
	 */
	private List<HospitalBasicInfo> hospitalBasicInfoList;
	
	@Override
	public String execute() throws Exception {
		/*organOperator = queryLogonUser();
		if(organOperator==null){
			mes="请登录";
			return SUCCESS;
		}*/
		/*
		 * 添加or更新医生基础信息
		 */
		if("saveOrUpdateDoctorBasicInfo".equals(action)){
			saveOrUpdateDoctorBasicInfo();
		}
		/*
		 * 提交审批
		 */
		else if("commitApprove".equals(action)){
			commitApprove();
		}
		/*
		 * 添加or更新身份证明
		 */
		else if("saveOrUpdateDoctorCardInfo".equals(action)){
			saveOrUpdateDoctorCardInfo();
		}
		/*
		 * 添加or更新医生评价
		 */
		else if("saveOrUpdateDoctorAppraise".equals(action)){
			saveOrUpdateDoctorAppraise();
		}
		/*
		 * 添加or更新医生生活信息 
		 */
		else if("saveOrUpdateDoctorLifInfo".equals(action)){
			saveOrUpdateDoctorLifInfo();
		}
		/*
		 * 跳转到签医生页面 
		 */
		else if("initDoctorInfoPage".equals(action)){
			initDoctorInfoPage();
		}
		/*
		 * 上传医生资格证书图片
		 */
		else if("uploadDoctorImageInfo".equals(action)){
			uploadDoctorImageInfo();
		}
		/*
		 * 删除医生资格证书图片
		 */
		else if("removeDoctorImageInfo".equals(action)){
			removeDoctorImageInfo();
		}
		/*
		 * 要签约的医生信息查询
		 */
		else if("querySignDoctor".equals(action)){
			querySignDoctor();
		}else{
			mes = "没有此方法";
		}
		mes = "成功";
		return SUCCESS;
	}
	/**
	 * 提交审批
	 */
	private void commitApprove(){
		doctorInfo = doctorRegisterDataGatherService.get(doctorInfo.getId(), DoctorInfo.class);
		doctorInfo.setAuthentication("已申请");
		doctorRegisterDataGatherService.update(doctorInfo);
	}
	/**
	 * 删除医生资格证书图片
	 */
	private void removeDoctorImageInfo(){
		doctorRegisterDataGatherService.deleteDoctorCardInfo(doctorCardInfo.getId());
	}
	/**
	 * 上传医生资格证书图片
	 */
	private void uploadDoctorImageInfo(){
		//上传证书图片
		doctorCardInfo.setImgPath(uploadImage(doctorCardInfo.getId(), doctorCardInfo.getImgPath(), doctorCardInfo.getImgBase64()));
		doctorRegisterDataGatherService.saveOrUpdateDoctorCardInfo(doctorCardInfo);
	}
	/**
	 * 添加or更新医生评价
	 */
	private void saveOrUpdateDoctorAppraise(){
		DoctorInfo dctInfo =  doctorRegisterDataGatherService.get(doctorInfo.getId(), DoctorInfo.class);
		dctInfo.setDoctorImpression(doctorInfo.getDoctorImpression());
		doctorRegisterDataGatherService.update(dctInfo);
	}
	/**
	 * 添加or更新医生生活信息 
	 */
	private void saveOrUpdateDoctorLifInfo(){
		DoctorInfo dctInfo =  doctorRegisterDataGatherService.get(doctorInfo.getId(), DoctorInfo.class);
		doctorLifeInfo.setDoctorInfo(dctInfo);
		super.doctorRegisterDataGatherService.saveOrUpdateDoctorLifeInfo(doctorLifeInfo);
	}
	/**
	 * 要签约的医生信息查询
	 */
	private void querySignDoctor(){
		List<DoctorInfo> doctorinfos = doctorRegisterDataGatherService.getDoctorinfos(doctorInfo, professionFlag);
		
		SignDoctors = new ArrayList<SignDoctor>();
		//格式化组装医生基础信息
		Map<String, Object> packageDoctorInfos = packageDoctorInfos(doctorinfos);
		for (String key : packageDoctorInfos.keySet()) {
			List<DoctorInfo> dcts = (List<DoctorInfo>)packageDoctorInfos.get(key);
			SignDoctors.add(new SignDoctor(key, dcts.size()+"", dcts));
		}
	}
	/**
	 * 格式化组装医生基础信息
	 * @param doctorinfos
	 * @return
	 */
	private Map<String,Object> packageDoctorInfos(List<DoctorInfo> doctorinfos){
		Map<String,Object> map = new LinkedHashMap<String,Object>();
		for (DoctorInfo doctorInfo : doctorinfos) {
			Date tmp_specify_date =  DateManage.parseStr2Date_yyyy_MM_dd(doctorInfo.getRegisterTime());
			SimpleDateFormat sdf = new SimpleDateFormat("yyyy年MM月");
			String key = sdf.format(tmp_specify_date);
			Object object = map.get(key);				
			if(object==null){
				object = new ArrayList<DoctorInfo>();
				map.put(key, object);
			}
			((List)object).add(doctorInfo);
		}
		return map;
	}
	/**
	 * 查询登陆人
	 * @return
	 */
	private OrganOperator queryLogonUser(){
		return (OrganOperator)ActionContext.getContext().getSession().get("organOperator");
	}
	/**
	 * 添加or更新医生基础信息
	 */
	private void saveOrUpdateDoctorBasicInfo(){
		Long dctID = doctorInfo.getId();
		//保存图片
		String uploadImage = uploadImage(dctID, doctorInfo.getDoctorImage(), doctorInfo.getImgBase64());
		doctorInfo.setDoctorImage(uploadImage);
		if(dctID==null){
			//add
			doctorInfo.setOrganOperator(organOperator);
			doctorInfo.setDoctorStatus("N");
			doctorInfo.setAuthentication("未申请");
			doctorInfo.setRegisterTime(DateManage.formatDateStr_yyyy_MM_dd_HH_mm_ss(new Date()));
			doctorInfo.setDoctorPassword(EncryptUtil.getMD5Str("123"));
			super.doctorInfoBo.save(doctorInfo);
			LogUtil.debug("创建注册医生,ID为"+doctorInfo.getId());
		}else{
			//update
			super.doctorInfoBo.update(doctorInfo);
		}
	}
	/**
	 * 添加or更新身份证明
	 */
	private void saveOrUpdateDoctorCardInfo(){
		DoctorInfo dctInfo =  doctorRegisterDataGatherService.get(doctorInfo.getId(), DoctorInfo.class);
		//保存身份证
		if(StringUtils.isNotBlank(doctorInfo.getIdCardNum())){
			dctInfo.setIdCardNum(doctorInfo.getIdCardNum());
		}
		if(StringUtils.isNotBlank(doctorInfo.getIdCard())){
			dctInfo.setIdCard(doctorInfo.getIdCard());
		}
		doctorRegisterDataGatherService.update(dctInfo);
	}
	/**
	 * 跳转到签医生页面 
	 */
	private void initDoctorInfoPage(){
		//初始化加载页面必要数据
		initPageData();
		Long dctID = doctorInfo.getId();
		if(dctID!=null){
			//医生基础信息
			doctorInfo = doctorRegisterDataGatherService.get(dctID, DoctorInfo.class);
			//身份证明
			doctorCardInfos = super.doctorRegisterDataGatherService.getDoctorCardInfos(doctorInfo.getId());
			//生活信息
			List<DoctorLifeInfo> doctorLifeInfos = super.doctorRegisterDataGatherService.getDoctorLifeInfos(doctorInfo.getId());
			if(doctorLifeInfos.isEmpty()) doctorLifeInfo = null;
			else doctorLifeInfo = doctorLifeInfos.get(0);
		}
	}
	/**
	 * 初始化加载页面必要数据
	 */
	private void initPageData(){
		if(major==null){
			major = new DoctorMajor();
			major.setDoctorType(professionFlag);
		}
		//医院基本信息
		positionList = doctorIdentifyBo.getAllPosition();//医生职称
		doctorServiceTypes = super.doctorRegisterDataGatherService.getAllDoctorServiceTypes();//医生服务列表
		hospitalBasicInfoList = super.doctorRegisterDataGatherService.getHospitalBasicInfos(null);//医院列表
		firstMajors = super.doctorRegisterDataGatherService.getMajors(major, "first");
		secondMajors = super.doctorRegisterDataGatherService.getMajors(major, "second");
		thirdMajors = super.doctorRegisterDataGatherService.getMajors(major, "third");
		doctorGoodFields = super.doctorRegisterDataGatherService.getDoctorGoodFields(professionFlag);
	}
	/**
	 * 上传图片
	 * @param id 对象ID 
	 * @param imagePath 已有的图片路径
	 * @param imgBase64 base64编码后的图片
	 * @return
	 */
	private String uploadImage(Long id,String imagePath,String imgBase64){
		String tempDir = "";
		if (id != null && StringUtils.isNotBlank(imagePath)) {
			tempDir = imagePath;
		} else {
			SimpleDateFormat df = new SimpleDateFormat("yyyyMMddhhmmss");
			String current = df.format(new Date());
			String bannerName = "fd" + current + ".jpg";
			tempDir = uploadDir + "/" + bannerName;
			imagePath = tempDir;
		}
		if (StringUtils.isNotBlank(imgBase64)) {
			String directory = ServletActionContext.getServletContext()
					.getRealPath(uploadDir + "/");
			File cacheDir = new File(directory);
			// 如果文件夹不存在则创建
			if (!cacheDir.exists() && !cacheDir.isDirectory()) {
				System.out.println("//不存在");
				cacheDir.mkdirs();
			} else {
				System.out.println("//目录存在");
			}
			// 上传图片
			String dir = ServletActionContext.getServletContext()
					.getRealPath(tempDir);
			try {
				EncryptUtil.uploadImage(imgBase64, dir);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		if(imagePath.indexOf("/")!=-1) imagePath = imagePath.substring(imagePath.lastIndexOf("/")+1);
		return imagePath;
	}
	
	
	
	
	
	
	//----------------setter/getter---------------------------------------
	public DoctorInfo getDoctorInfo() {
		return doctorInfo;
	}
	public DoctorMajor getMajor() {
		return major;
	}
	public void setMajor(DoctorMajor major) {
		this.major = major;
	}
	@Override
	public String getMes() {
		return mes;
	}
	@Override
	public void setMes(String mes) {
		this.mes = mes;
	}
	public void setDoctorInfo(DoctorInfo doctorInfo) {
		this.doctorInfo = doctorInfo;
	}
	public DoctorCardInfo getDoctorCardInfo() {
		return doctorCardInfo;
	}
	public void setDoctorCardInfo(DoctorCardInfo doctorCardInfo) {
		this.doctorCardInfo = doctorCardInfo;
	}
	public DoctorLifeInfo getDoctorLifeInfo() {
		return doctorLifeInfo;
	}
	public void setDoctorLifeInfo(DoctorLifeInfo doctorLifeInfo) {
		this.doctorLifeInfo = doctorLifeInfo;
	}
	public HospitalBasicInfo getHospitalBasicInfo() {
		return hospitalBasicInfo;
	}
	public void setHospitalBasicInfo(HospitalBasicInfo hospitalBasicInfo) {
		this.hospitalBasicInfo = hospitalBasicInfo;
	}
	public List<Position> getPositionList() {
		return positionList;
	}
	public void setPositionList(List<Position> positionList) {
		this.positionList = positionList;
	}
	public List<DoctorMajor> getFirstMajors() {
		return firstMajors;
	}
	public void setFirstMajors(List<DoctorMajor> firstMajors) {
		this.firstMajors = firstMajors;
	}
	public List<DoctorMajor> getSecondMajors() {
		return secondMajors;
	}
	public void setSecondMajors(List<DoctorMajor> secondMajors) {
		this.secondMajors = secondMajors;
	}
	public List<DoctorMajor> getThirdMajors() {
		return thirdMajors;
	}
	public void setThirdMajors(List<DoctorMajor> thirdMajors) {
		this.thirdMajors = thirdMajors;
	}
	public List<DoctorServiceType> getDoctorServiceTypes() {
		return doctorServiceTypes;
	}
	public void setDoctorServiceTypes(List<DoctorServiceType> doctorServiceTypes) {
		this.doctorServiceTypes = doctorServiceTypes;
	}
	public List<HospitalBasicInfo> getHospitalBasicInfoList() {
		return hospitalBasicInfoList;
	}
	public void setHospitalBasicInfoList(
			List<HospitalBasicInfo> hospitalBasicInfoList) {
		this.hospitalBasicInfoList = hospitalBasicInfoList;
	}
	public String getUploadDir() {
		return uploadDir;
	}
	public void setUploadDir(String uploadDir) {
		this.uploadDir = uploadDir;
	}
	public List<DoctorCardInfo> getDoctorCardInfos() {
		return doctorCardInfos;
	}
	public void setDoctorCardInfos(List<DoctorCardInfo> doctorCardInfos) {
		this.doctorCardInfos = doctorCardInfos;
	}
	public String getProfessionFlag() {
		return professionFlag;
	}
	public void setProfessionFlag(String professionFlag) {
		this.professionFlag = professionFlag;
	}
	public List<SignDoctor> getSignDoctors() {
		return SignDoctors;
	}
	public void setSignDoctors(List<SignDoctor> signDoctors) {
		SignDoctors = signDoctors;
	}
	public List<DoctorGoodField> getDoctorGoodFields() {
		return doctorGoodFields;
	}
	public void setDoctorGoodFields(List<DoctorGoodField> doctorGoodFields) {
		this.doctorGoodFields = doctorGoodFields;
	}
	public OrganOperator getOrganOperator() {
		return organOperator;
	}
	public void setOrganOperator(OrganOperator organOperator) {
		this.organOperator = organOperator;
	}
}
